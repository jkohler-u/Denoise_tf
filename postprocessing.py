# -*- coding: utf-8 -*-
"""postprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1brDRob4BCWGUucbrGF6bFZg63uAiuK0z
"""

import numpy as np
import librosa
import tensorflow as tf

def convert_to_audio(data, noisy, n_fft=1024, hop_length=256, window='hann', sr=16000):
    ''' reconvert prediction to audio
  
      Args:
          data (array-like): the predicted magnitude spectrogram to be sampled from
          noisy (array-like): the original noisy audio
          n_fft (int>0, optional): length of the windowed signal after padding with zeros. Default is 2048
          hop_length (int>0, optional): number of audio samples between adjacent STFT columns. Default is: 256
          window (string, tuple, number, function, np.ndarray [shape=(n_fft,)]), optional: window function. Default is  a raised cosine window: 'hann'
       Returns: 
           Reconstructed audio as np.ndarray
           
    '''
    #get the phase information
    spectrogram = librosa.stft(np.array(noisy), n_fft=n_fft, hop_length=hop_length, window='hann')
    phase = (np.angle(spectrogram))
    #convert the mel-spectrogram to a stft
    magnitude = data+30
    magnitude = librosa.db_to_power(magnitude, ref=1.0)

    mag = librosa.feature.inverse.mel_to_stft(magnitude, n_fft=n_fft, sr=sr)
    spectrogram_complex = mag * np.exp(1j * np.angle(phase))
    reconstructed_audio=librosa.istft(spectrogram_complex ,hop_length=hop_length)
    #returns the audio data
    return reconstructed_audio
