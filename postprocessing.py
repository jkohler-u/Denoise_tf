# -*- coding: utf-8 -*-
"""postprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1brDRob4BCWGUucbrGF6bFZg63uAiuK0z
"""

import numpy as np
import librosa
import tensorflow as tf

def convert_to_audio(data, noisy, n_fft=1024, hop_length=256, window='hann', sr=16000):
    ''' reconvert prediction to audio
  
      Keyword arguments:
          data: the predicted magnitude spectrogram to be sampled from
          noisy: the original noisy audio
      Arguments:
           n_fft: length of the windowed signal after padding with zeros (default is 2048)
           hop_length: number of audio samples between adjacent STFT columns (default is: 256)
           window: window function (default is  a raised cosine window: 'hann')
       Returns: 
           Reconstructed audio as np.ndarray
           
    '''
    #get the phase information
    spectrogram = librosa.stft(np.array(noisy), n_fft=n_fft, hop_length=hop_length, window='hann')
    phase = (np.angle(spectrogram))
    #convert the mel-spectrogram to a stft
    magnitude = data+30
    magnitude = librosa.db_to_power(magnitude, ref=1.0)

    mag = librosa.feature.inverse.mel_to_stft(magnitude, n_fft=n_fft, sr=sr)
    spectrogram_complex = mag * np.exp(1j * np.angle(phase))
    reconstructed_audio=librosa.istft(spectrogram_complex ,hop_length=hop_length)
    #returns the audio data
    return reconstructed_audio
